.global factorial
.global main

factorial:
    # Push arguments onto the stack (n)
    pushq %rdi

    # Check if n is zero
    cmpq $0, %rdi
    je .factorial_done

    # Recursive call: n * factorial(n - 1)
    movq %rdi, %rax  # Move n to rax for calculation
    decq %rdi        # Decrement n for recursive call
    call factorial    # Recursive call

    # Multiply result by n
    mulq %rdi        # Multiply rax (factorial(n - 1)) by n on the stack

.factorial_done:
    # Pop arguments and return value
    popq %rdi        # Pop n from the stack (not used in return value)
    ret              # Return the factorial value from rax

main:
    # Push argument 5 for factorial
    pushq $5

    # Call factorial
    call factorial

    # Print the result (system call)
    movq %rax, %rdi  # Move result from factorial to rdi (syscall argument)
    movb $4, %al     # Set system call number (4 for write)
    syscall          # System call to print

    # Exit program (system call)
    movb $1, %al     # Set system call number (1 for exit)
    xorl %edi, %edi  # Set exit status to 0 (successful)
    syscall          # System call to exit

.data
    .align 8
    print_fmt: .string "%d\n"  # Format string for printing integers
